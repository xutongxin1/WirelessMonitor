cmake_minimum_required(VERSION 3.24)
#project(Qt)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

project(
  WirelessMonitor
  VERSION 0.1
  LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)


set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 20)


add_definitions(-DQCUSTOMPLOT_USE_OPENGL)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_PROJECT_VERSION 1.1)

set(Boost_NO_WARN_NEW_VERSIONS 1)
#set(CMAKE_PREFIX_PATH "C:/Qt/6.2.4/msvc2019_64/")

#set(Python_ROOT_DIR C:/Users/xtx/.vcpkg-clion/vcpkg/installed/x64-windows/include/python3.11)
#set(Boost_INCLUDE_DIR C:/Users/xtx/.vcpkg-clion/vcpkg/installed/x64-windows/include/)
#set(Python3_DIR "C:/Users/xtx/.vcpkg-clion/vcpkg/installed/x64-windows/include/boost/python")

#include(C:/Users/xtx/.vcpkg-clion/vcpkg/scripts/buildsystems/vcpkg.cmake)

find_package(QT NAMES Qt6 REQUIRED PrintSupport COMPONENTS Network SerialPort Widgets OpenGL Concurrent)
find_package(Qt6 REQUIRED COMPONENTS Core5Compat)       # QT6
find_package(Qt6 REQUIRED COMPONENTS Gui)               # QT6
find_package(Qt${QT_VERSION_MAJOR} REQUIRED PrintSupport COMPONENTS Network SerialPort Widgets OpenGL Concurrent)


find_package(Python
        REQUIRED COMPONENTS Development)
find_package(Boost
        REQUIRED COMPONENTS python311)


file(GLOB HEADER "*.h")
file(GLOB RSOURCE "*.cpp")
file(GLOB UI "*.ui")
file(GLOB QRC "*.qrc")
#file(GLOB_RECURSE Resource "./thirdLib/qmetarial/resources.qrc")
file(GLOB_RECURSE SOURCES ${SOURCES} "./config/*.ini")

#if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux") #XXX平台可以是“Linux”等
#    EXECUTE_PROCESS(COMMAND cp -f ${PROJECT_SOURCE_DIR}/config/xxxx1.config ${PROJECT_SOURCE_DIR}/config/xxxx2.config)
#else()
#    EXECUTE_PROCESS(COMMAND cp -f ${PROJECT_SOURCE_DIR}/main/config/*.ini ${CMAKE_CURRENT_BINARY_DIR}/config/*.config)
#endif()

if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
    add_executable(${PROJECT_NAME} WIN32  ${HEADER} ${RSOURCE} ${UI} ${QRC} ${Resource})
else ()
    add_executable(${PROJECT_NAME}  ${HEADER} ${RSOURCE} ${UI} ${QRC} ${Resource})
endif ()
add_subdirectory(api)
add_subdirectory(components)
add_subdirectory(thirdLib)
#add_library(whatever STATIC ${SOURCES})
if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
    add_link_options(${PROJECT_NAME} PRIVATE -mwindows)
endif ()
target_include_directories(${PROJECT_NAME} PUBLIC ./components)
target_include_directories(${PROJECT_NAME} PUBLIC ./config)
MESSAGE(STATUS ${Boost_LIBRARY_DIR_DEBUG})
target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS}/python3.11)

if (EXISTS "${Boost_LIBRARY_DIR_DEBUG}/python311.lib")
    message(STATUS "python311.lib exists, is OK!?")

else ()
    execute_process(COMMAND cp.exe -f ${Boost_LIBRARY_DIR_DEBUG}/python311_d.lib ${Boost_LIBRARY_DIR_DEBUG}/python311.lib
            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/thirdPartyTool/cp)
    message(STATUS "python311_d.lib OK")
endif ()

target_link_libraries(
        ${PROJECT_NAME} PUBLIC ${Boost_LIBRARY_DIR_DEBUG}/python311.lib PRIVATE Qt${QT_VERSION_MAJOR}::Widgets
        Qt${QT_VERSION_MAJOR}::Core Qt6::PrintSupport Qt6::SerialPort
        Qt6::Network qmetarialComponents Qt6::Core5Compat Qt6::Gui Qt6::OpenGL Qt6::Concurrent "${CMAKE_CURRENT_SOURCE_DIR}/api/OpenGL32.Lib"  ${Boost_LIBRARIES})


set_target_properties(
        ${PROJECT_NAME}
        PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
        MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
        MACOSX_BUNDLE_SHORT_VERSION_STRING
        ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
        MACOSX_BUNDLE TRUE)

#add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
#        COMMAND cp -r -f ${PROJECT_SOURCE_DIR}/config ${CMAKE_CURRENT_BINARY_DIR}/Debug
#        )#给Clion等win环境使用

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND cp.exe -r -f ${PROJECT_SOURCE_DIR}/config ${CMAKE_CURRENT_BINARY_DIR}
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/thirdPartyTool/cp
        )#QTCreator或者linux环境使用




if (EXISTS "${CMAKE_CURRENT_BINARY_DIR}/Debug/resource")
    message(STATUS "resource exists")

else ()
    message(STATUS "resource does not exist")
    file(COPY ./thirdLib/qmetarial/icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug/resource FOLLOW_SYMLINK_CHAIN)
endif ()

if (EXISTS "${CMAKE_CURRENT_BINARY_DIR}/resource")
    message(STATUS "resource exists")

else ()
    message(STATUS "resource does not exist")
    file(COPY ./thirdLib/qmetarial/icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/resource FOLLOW_SYMLINK_CHAIN)
endif ()


add_subdirectory(thirdTarget_ComTool)